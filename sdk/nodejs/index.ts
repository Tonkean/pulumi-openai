// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AssistantArgs, AssistantState } from "./assistant";
export type Assistant = import("./assistant").Assistant;
export const Assistant: typeof import("./assistant").Assistant = null as any;
utilities.lazyLoad(exports, ["Assistant"], () => require("./assistant"));

export { FileArgs, FileState } from "./file";
export type File = import("./file").File;
export const File: typeof import("./file").File = null as any;
utilities.lazyLoad(exports, ["File"], () => require("./file"));

export { FinetuningJobArgs, FinetuningJobState } from "./finetuningJob";
export type FinetuningJob = import("./finetuningJob").FinetuningJob;
export const FinetuningJob: typeof import("./finetuningJob").FinetuningJob = null as any;
utilities.lazyLoad(exports, ["FinetuningJob"], () => require("./finetuningJob"));

export { GetFileArgs, GetFileResult, GetFileOutputArgs } from "./getFile";
export const getFile: typeof import("./getFile").getFile = null as any;
export const getFileOutput: typeof import("./getFile").getFileOutput = null as any;
utilities.lazyLoad(exports, ["getFile","getFileOutput"], () => require("./getFile"));

export { GetFilesResult } from "./getFiles";
export const getFiles: typeof import("./getFiles").getFiles = null as any;
export const getFilesOutput: typeof import("./getFiles").getFilesOutput = null as any;
utilities.lazyLoad(exports, ["getFiles","getFilesOutput"], () => require("./getFiles"));

export { GetFinetuningJobArgs, GetFinetuningJobResult, GetFinetuningJobOutputArgs } from "./getFinetuningJob";
export const getFinetuningJob: typeof import("./getFinetuningJob").getFinetuningJob = null as any;
export const getFinetuningJobOutput: typeof import("./getFinetuningJob").getFinetuningJobOutput = null as any;
utilities.lazyLoad(exports, ["getFinetuningJob","getFinetuningJobOutput"], () => require("./getFinetuningJob"));

export { GetFinetuningJobsResult } from "./getFinetuningJobs";
export const getFinetuningJobs: typeof import("./getFinetuningJobs").getFinetuningJobs = null as any;
export const getFinetuningJobsOutput: typeof import("./getFinetuningJobs").getFinetuningJobsOutput = null as any;
utilities.lazyLoad(exports, ["getFinetuningJobs","getFinetuningJobsOutput"], () => require("./getFinetuningJobs"));

export { GetModelArgs, GetModelResult, GetModelOutputArgs } from "./getModel";
export const getModel: typeof import("./getModel").getModel = null as any;
export const getModelOutput: typeof import("./getModel").getModelOutput = null as any;
utilities.lazyLoad(exports, ["getModel","getModelOutput"], () => require("./getModel"));

export { GetModelsResult } from "./getModels";
export const getModels: typeof import("./getModels").getModels = null as any;
export const getModelsOutput: typeof import("./getModels").getModelsOutput = null as any;
utilities.lazyLoad(exports, ["getModels","getModelsOutput"], () => require("./getModels"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "openai:index/assistant:Assistant":
                return new Assistant(name, <any>undefined, { urn })
            case "openai:index/file:File":
                return new File(name, <any>undefined, { urn })
            case "openai:index/finetuningJob:FinetuningJob":
                return new FinetuningJob(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("openai", "index/assistant", _module)
pulumi.runtime.registerResourceModule("openai", "index/file", _module)
pulumi.runtime.registerResourceModule("openai", "index/finetuningJob", _module)
pulumi.runtime.registerResourcePackage("openai", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:openai") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
