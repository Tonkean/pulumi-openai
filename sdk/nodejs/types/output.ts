// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AssistantTool {
    /**
     * Function definition for tools of type function.
     */
    function?: outputs.AssistantToolFunction;
    /**
     * Tools can be of types code_interpreter, retrieval, or function.
     */
    type: string;
}

export interface AssistantToolFunction {
    /**
     * A description of what the function does, used by the model to choose when and how to call the function.
     */
    description?: string;
    /**
     * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
     */
    name: string;
    /**
     * The parameters the functions accepts, described as a JSON Schema object.
     */
    parameters: string;
}

export interface AssistantToolResources {
    /**
     * Function definition for tools of type function.
     */
    codeInterpreter?: outputs.AssistantToolResourcesCodeInterpreter;
    /**
     * Function definition for tools of type function.
     */
    fileSearch?: outputs.AssistantToolResourcesFileSearch;
}

export interface AssistantToolResourcesCodeInterpreter {
    /**
     * A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
     */
    fileIds?: string[];
}

export interface AssistantToolResourcesFileSearch {
    /**
     * A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
     */
    vectorStoreIds?: string[];
    /**
     * Function definition for tools of type function.
     */
    vectorStores?: outputs.AssistantToolResourcesFileSearchVectorStores;
}

export interface AssistantToolResourcesFileSearchVectorStores {
    /**
     * A list of file IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
     */
    fileIds?: string[];
    /**
     * Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
     */
    metadata?: {[key: string]: string};
}

export interface FinetuningJobHyperparams {
    /**
     * N Epochs
     */
    nEpochs: number;
}

export interface GetFilesFile {
    /**
     * File size in bytes
     */
    bytes: number;
    /**
     * Created Time
     */
    created: number;
    /**
     * Filename
     */
    filename: string;
    /**
     * Filepath
     */
    filepath: string;
    /**
     * File Identifier
     */
    id: string;
    /**
     * Object Type
     */
    object: string;
    /**
     * Intended use of file. Use 'fine-tune' for Fine-tuning
     */
    purpose: string;
}

export interface GetFinetuningJobHyperparams {
    /**
     * N Epochs
     */
    nEpochs: number;
}

export interface GetFinetuningJobsJob {
    /**
     * Created Time
     */
    createdAt: number;
    /**
     * Fine-Tuned Model ID
     */
    fineTunedModel: string;
    /**
     * Finished Time
     */
    finishedAt: number;
    /**
     * Hyperparams
     */
    hyperparams: outputs.GetFinetuningJobsJobHyperparams;
    /**
     * Fine-Tuning Job Identifier
     */
    id: string;
    /**
     * Model ID
     */
    model: string;
    /**
     * Object Type
     */
    object: string;
    /**
     * Organization ID
     */
    organizationId: string;
    /**
     * Result Files
     */
    resultFiles: string[];
    /**
     * Status
     */
    status: string;
    /**
     * Trained Tokens
     */
    trainedTokens: number;
    /**
     * Training File
     */
    trainingFile: string;
    /**
     * Validation File
     */
    validationFile: string;
}

export interface GetFinetuningJobsJobHyperparams {
    /**
     * N Epochs
     */
    nEpochs: number;
}

export interface GetModelPermission {
    /**
     * Allow Create Engine
     */
    allowCreateEngine: boolean;
    /**
     * Allow Fine Tuning
     */
    allowFineTuning: boolean;
    /**
     * Allow Logprobs
     */
    allowLogprobs: boolean;
    /**
     * Allow Sampling
     */
    allowSampling: boolean;
    /**
     * Allow Search Indices
     */
    allowSearchIndices: boolean;
    /**
     * Allow View
     */
    allowView: boolean;
    /**
     * Created Time
     */
    created: number;
    /**
     * Permission Identifier
     */
    id: string;
    /**
     * Is Blocking
     */
    isBlocking: boolean;
    /**
     * Object Type
     */
    object: string;
    /**
     * Organization
     */
    organization: string;
}

export interface GetModelsModel {
    /**
     * Created Time
     */
    created: number;
    /**
     * Model Identifier
     */
    id: string;
    /**
     * Object Type
     */
    object: string;
    /**
     * Model Owner
     */
    ownedBy: string;
    /**
     * Parent
     */
    parent: string;
    /**
     * Permissions
     */
    permissions: outputs.GetModelsModelPermission[];
    /**
     * Root
     */
    root: string;
}

export interface GetModelsModelPermission {
    /**
     * Allow Create Engine
     */
    allowCreateEngine: boolean;
    /**
     * Allow Fine Tuning
     */
    allowFineTuning: boolean;
    /**
     * Allow Logprobs
     */
    allowLogprobs: boolean;
    /**
     * Allow Sampling
     */
    allowSampling: boolean;
    /**
     * Allow Search Indices
     */
    allowSearchIndices: boolean;
    /**
     * Allow View
     */
    allowView: boolean;
    /**
     * Created Time
     */
    created: number;
    /**
     * Permission Identifier
     */
    id: string;
    /**
     * Is Blocking
     */
    isBlocking: boolean;
    /**
     * Object Type
     */
    object: string;
    /**
     * Organization
     */
    organization: string;
}

