// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Openai
{
    /// <summary>
    /// Assistant resource
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Openai = Pulumi.Openai;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Openai.Assistant("test", new()
    ///     {
    ///         Description = "tf-test-sample",
    ///         Instructions = "You are a personal math tutor. When asked a question, write and run Python code to answer the question.",
    ///         Model = "gpt-4",
    ///         Tools = new[]
    ///         {
    ///             new Openai.Inputs.AssistantToolArgs
    ///             {
    ///                 Type = "code_interpreter",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OpenaiResourceType("openai:index/assistant:Assistant")]
    public partial class Assistant : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Unix timestamp (in seconds) for when the assistant was created.
        /// </summary>
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the assistant. The maximum length is 512 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The system instructions that the assistant uses. The maximum length is 32768 characters.
        /// </summary>
        [Output("instructions")]
        public Output<string?> Instructions { get; private set; } = null!;

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// ID of the model to use. You can use the List models API to see all of your available models.
        /// </summary>
        [Output("model")]
        public Output<string> Model { get; private set; } = null!;

        /// <summary>
        /// The name of the assistant. The maximum length is 256 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The object type, which is always assistant.
        /// </summary>
        [Output("object")]
        public Output<string> Object { get; private set; } = null!;

        /// <summary>
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// </summary>
        [Output("temperature")]
        public Output<double?> Temperature { get; private set; } = null!;

        /// <summary>
        /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the code*interpreter tool requires a list of file IDs, while the file*search tool requires a list of vector store IDs.
        /// </summary>
        [Output("toolResources")]
        public Output<Outputs.AssistantToolResources?> ToolResources { get; private set; } = null!;

        /// <summary>
        /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function.
        /// </summary>
        [Output("tools")]
        public Output<ImmutableArray<Outputs.AssistantTool>> Tools { get; private set; } = null!;

        /// <summary>
        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        /// </summary>
        [Output("topP")]
        public Output<double?> TopP { get; private set; } = null!;


        /// <summary>
        /// Create a Assistant resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Assistant(string name, AssistantArgs args, CustomResourceOptions? options = null)
            : base("openai:index/assistant:Assistant", name, args ?? new AssistantArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Assistant(string name, Input<string> id, AssistantState? state = null, CustomResourceOptions? options = null)
            : base("openai:index/assistant:Assistant", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/tonkean/pulumi-openai",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Assistant resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Assistant Get(string name, Input<string> id, AssistantState? state = null, CustomResourceOptions? options = null)
        {
            return new Assistant(name, id, state, options);
        }
    }

    public sealed class AssistantArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the assistant. The maximum length is 512 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The system instructions that the assistant uses. The maximum length is 32768 characters.
        /// </summary>
        [Input("instructions")]
        public Input<string>? Instructions { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// ID of the model to use. You can use the List models API to see all of your available models.
        /// </summary>
        [Input("model", required: true)]
        public Input<string> Model { get; set; } = null!;

        /// <summary>
        /// The name of the assistant. The maximum length is 256 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// </summary>
        [Input("temperature")]
        public Input<double>? Temperature { get; set; }

        /// <summary>
        /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the code*interpreter tool requires a list of file IDs, while the file*search tool requires a list of vector store IDs.
        /// </summary>
        [Input("toolResources")]
        public Input<Inputs.AssistantToolResourcesArgs>? ToolResources { get; set; }

        [Input("tools")]
        private InputList<Inputs.AssistantToolArgs>? _tools;

        /// <summary>
        /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function.
        /// </summary>
        public InputList<Inputs.AssistantToolArgs> Tools
        {
            get => _tools ?? (_tools = new InputList<Inputs.AssistantToolArgs>());
            set => _tools = value;
        }

        /// <summary>
        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        /// </summary>
        [Input("topP")]
        public Input<double>? TopP { get; set; }

        public AssistantArgs()
        {
        }
        public static new AssistantArgs Empty => new AssistantArgs();
    }

    public sealed class AssistantState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Unix timestamp (in seconds) for when the assistant was created.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the assistant. The maximum length is 512 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The system instructions that the assistant uses. The maximum length is 32768 characters.
        /// </summary>
        [Input("instructions")]
        public Input<string>? Instructions { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// ID of the model to use. You can use the List models API to see all of your available models.
        /// </summary>
        [Input("model")]
        public Input<string>? Model { get; set; }

        /// <summary>
        /// The name of the assistant. The maximum length is 256 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The object type, which is always assistant.
        /// </summary>
        [Input("object")]
        public Input<string>? Object { get; set; }

        /// <summary>
        /// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
        /// </summary>
        [Input("temperature")]
        public Input<double>? Temperature { get; set; }

        /// <summary>
        /// A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the code*interpreter tool requires a list of file IDs, while the file*search tool requires a list of vector store IDs.
        /// </summary>
        [Input("toolResources")]
        public Input<Inputs.AssistantToolResourcesGetArgs>? ToolResources { get; set; }

        [Input("tools")]
        private InputList<Inputs.AssistantToolGetArgs>? _tools;

        /// <summary>
        /// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types code_interpreter, retrieval, or function.
        /// </summary>
        public InputList<Inputs.AssistantToolGetArgs> Tools
        {
            get => _tools ?? (_tools = new InputList<Inputs.AssistantToolGetArgs>());
            set => _tools = value;
        }

        /// <summary>
        /// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
        /// </summary>
        [Input("topP")]
        public Input<double>? TopP { get; set; }

        public AssistantState()
        {
        }
        public static new AssistantState Empty => new AssistantState();
    }
}
