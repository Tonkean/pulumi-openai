// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package openai

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tonkean/pulumi-openai/sdk/go/openai/internal"
)

// File data source
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tonkean/pulumi-openai/sdk/go/openai"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := openai.LookupFile(ctx, &openai.LookupFileArgs{
//				Id: "1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFile(ctx *pulumi.Context, args *LookupFileArgs, opts ...pulumi.InvokeOption) (*LookupFileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFileResult
	err := ctx.Invoke("openai:index/getFile:getFile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFile.
type LookupFileArgs struct {
	// File Identifier
	Id string `pulumi:"id"`
}

// A collection of values returned by getFile.
type LookupFileResult struct {
	// File size in bytes
	Bytes int `pulumi:"bytes"`
	// Created Time
	Created int `pulumi:"created"`
	// Filename
	Filename string `pulumi:"filename"`
	// Filepath
	Filepath string `pulumi:"filepath"`
	// File Identifier
	Id string `pulumi:"id"`
	// Object Type
	Object string `pulumi:"object"`
	// Intended use of file. Use 'fine-tune' for Fine-tuning
	Purpose string `pulumi:"purpose"`
}

func LookupFileOutput(ctx *pulumi.Context, args LookupFileOutputArgs, opts ...pulumi.InvokeOption) LookupFileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFileResult, error) {
			args := v.(LookupFileArgs)
			r, err := LookupFile(ctx, &args, opts...)
			var s LookupFileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFileResultOutput)
}

// A collection of arguments for invoking getFile.
type LookupFileOutputArgs struct {
	// File Identifier
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupFileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFileArgs)(nil)).Elem()
}

// A collection of values returned by getFile.
type LookupFileResultOutput struct{ *pulumi.OutputState }

func (LookupFileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFileResult)(nil)).Elem()
}

func (o LookupFileResultOutput) ToLookupFileResultOutput() LookupFileResultOutput {
	return o
}

func (o LookupFileResultOutput) ToLookupFileResultOutputWithContext(ctx context.Context) LookupFileResultOutput {
	return o
}

// File size in bytes
func (o LookupFileResultOutput) Bytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupFileResult) int { return v.Bytes }).(pulumi.IntOutput)
}

// Created Time
func (o LookupFileResultOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v LookupFileResult) int { return v.Created }).(pulumi.IntOutput)
}

// Filename
func (o LookupFileResultOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileResult) string { return v.Filename }).(pulumi.StringOutput)
}

// Filepath
func (o LookupFileResultOutput) Filepath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileResult) string { return v.Filepath }).(pulumi.StringOutput)
}

// File Identifier
func (o LookupFileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileResult) string { return v.Id }).(pulumi.StringOutput)
}

// Object Type
func (o LookupFileResultOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileResult) string { return v.Object }).(pulumi.StringOutput)
}

// Intended use of file. Use 'fine-tune' for Fine-tuning
func (o LookupFileResultOutput) Purpose() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFileResult) string { return v.Purpose }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFileResultOutput{})
}
